/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExchangeInterface extends utils.Interface {
  contractName: "Exchange";
  functions: {
    "AutoCloseMargin()": FunctionFragment;
    "_closeLongPostiton(address,uint256)": FunctionFragment;
    "_closeShortPosition(address,uint256)": FunctionFragment;
    "activeUsers(uint256)": FunctionFragment;
    "assetAddress()": FunctionFragment;
    "calculatePartialLiquidateValue(address)": FunctionFragment;
    "closePosition(uint256)": FunctionFragment;
    "collateral(address,address)": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "discountRate()": FunctionFragment;
    "doesUserExist(address)": FunctionFragment;
    "getAccountValue(address)": FunctionFragment;
    "getAllActiveUsers()": FunctionFragment;
    "getAllLongvBaycBalance()": FunctionFragment;
    "getAllShortvBaycBalance()": FunctionFragment;
    "getLongBaycAmountOut(uint256)": FunctionFragment;
    "getLongUsdAmountOut(uint256)": FunctionFragment;
    "getPNL(address)": FunctionFragment;
    "getPositionNotional(address)": FunctionFragment;
    "getShortBaycAmountOut(uint256)": FunctionFragment;
    "getShortUsdAmountOut(uint256)": FunctionFragment;
    "hardLiquidate(address)": FunctionFragment;
    "initialVirtualPool(uint256,uint256)": FunctionFragment;
    "insuranceFunds()": FunctionFragment;
    "isHardLiquidateable(address)": FunctionFragment;
    "isPartialLiquidateable(address)": FunctionFragment;
    "latestFeeUpdate()": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "liquidateUsers()": FunctionFragment;
    "maintenanceMargin()": FunctionFragment;
    "nftOracle()": FunctionFragment;
    "openLongPosition(uint256)": FunctionFragment;
    "openShortPosition(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "partialLiquidate(address)": FunctionFragment;
    "partialLiquidateUsers()": FunctionFragment;
    "paused()": FunctionFragment;
    "payment()": FunctionFragment;
    "positive(int256)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "pricingAsset()": FunctionFragment;
    "removeActiveUser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestPrice()": FunctionFragment;
    "saveLevelMargin()": FunctionFragment;
    "setFundingRate()": FunctionFragment;
    "setSwapFee(uint8)": FunctionFragment;
    "specId()": FunctionFragment;
    "swapFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "userMargin(address)": FunctionFragment;
    "uservBaycBalance(address)": FunctionFragment;
    "uservUsdBalance(address)": FunctionFragment;
    "vBaycPoolSize()": FunctionFragment;
    "vUsdPoolSize()": FunctionFragment;
    "withdrawCollateral(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AutoCloseMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_closeLongPostiton",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_closeShortPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePartialLiquidateValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "discountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doesUserExist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLongvBaycBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllShortvBaycBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLongBaycAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLongUsdAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPNL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPositionNotional",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortBaycAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShortUsdAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hardLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialVirtualPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHardLiquidateable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartialLiquidateable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestFeeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceMargin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openLongPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partialLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "partialLiquidateUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeActiveUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saveLevelMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "specId", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(functionFragment: "userMargin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uservBaycBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uservUsdBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vBaycPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vUsdPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AutoCloseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_closeLongPostiton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_closeShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePartialLiquidateValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesUserExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLongvBaycBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllShortvBaycBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongBaycAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongUsdAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPNL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortBaycAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortUsdAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hardLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialVirtualPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHardLiquidateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartialLiquidateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestFeeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openLongPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partialLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partialLiquidateUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeActiveUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveLevelMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "specId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uservBaycBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uservUsdBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vBaycPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vUsdPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "NewOracle(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; balance: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type NewOracleEvent = TypedEvent<[string], { oracle: string }>;

export type NewOracleEventFilter = TypedEventFilter<NewOracleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; balance: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Exchange extends BaseContract {
  contractName: "Exchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<[number]>;

    _closeLongPostiton(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _closeShortPosition(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetAddress(overrides?: CallOverrides): Promise<[string]>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { x: BigNumber }>;

    closePosition(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRate(overrides?: CallOverrides): Promise<[number]>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<[string[]]>;

    getAllLongvBaycBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllShortvBaycBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLongBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLongUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPNL(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShortBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShortUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      _usdSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insuranceFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    isHardLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartialLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRequestId(overrides?: CallOverrides): Promise<[string]>;

    liquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maintenanceMargin(overrides?: CallOverrides): Promise<[number]>;

    nftOracle(overrides?: CallOverrides): Promise<[string]>;

    openLongPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openShortPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    partialLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    partialLiquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payment(overrides?: CallOverrides): Promise<[BigNumber]>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    pricingAsset(overrides?: CallOverrides): Promise<[string]>;

    removeActiveUser(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<[number]>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    specId(overrides?: CallOverrides): Promise<[string]>;

    swapFee(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    uservBaycBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uservUsdBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vBaycPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

  _closeLongPostiton(
    _user: string,
    _assetSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _closeShortPosition(
    _user: string,
    _assetSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activeUsers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  assetAddress(overrides?: CallOverrides): Promise<string>;

  calculatePartialLiquidateValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    _assetSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRate(overrides?: CallOverrides): Promise<number>;

  doesUserExist(_user: string, overrides?: CallOverrides): Promise<boolean>;

  getAccountValue(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAllActiveUsers(overrides?: CallOverrides): Promise<string[]>;

  getAllLongvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getAllShortvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getLongBaycAmountOut(
    _vUsdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLongUsdAmountOut(
    _vBaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPositionNotional(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShortBaycAmountOut(
    _vUsdAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShortUsdAmountOut(
    _vBaycAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hardLiquidate(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialVirtualPool(
    _assetSize: BigNumberish,
    _usdSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insuranceFunds(overrides?: CallOverrides): Promise<BigNumber>;

  isHardLiquidateable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartialLiquidateable(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  latestRequestId(overrides?: CallOverrides): Promise<string>;

  liquidateUsers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maintenanceMargin(overrides?: CallOverrides): Promise<number>;

  nftOracle(overrides?: CallOverrides): Promise<string>;

  openLongPosition(
    _usdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openShortPosition(
    _usdAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  partialLiquidate(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  partialLiquidateUsers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payment(overrides?: CallOverrides): Promise<BigNumber>;

  positive(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  pricingAsset(overrides?: CallOverrides): Promise<string>;

  removeActiveUser(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saveLevelMargin(overrides?: CallOverrides): Promise<number>;

  setFundingRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  specId(overrides?: CallOverrides): Promise<string>;

  swapFee(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  uservBaycBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  uservUsdBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vBaycPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawCollateral(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<number>;

    _closeLongPostiton(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _closeShortPosition(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activeUsers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    assetAddress(overrides?: CallOverrides): Promise<string>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _assetSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    discountRate(overrides?: CallOverrides): Promise<number>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<boolean>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<string[]>;

    getAllLongvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllShortvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLongBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLongUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hardLiquidate(_user: string, overrides?: CallOverrides): Promise<void>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      _usdSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceFunds(overrides?: CallOverrides): Promise<BigNumber>;

    isHardLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartialLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<string>;

    liquidateUsers(overrides?: CallOverrides): Promise<void>;

    maintenanceMargin(overrides?: CallOverrides): Promise<number>;

    nftOracle(overrides?: CallOverrides): Promise<string>;

    openLongPosition(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openShortPosition(
      _usdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    partialLiquidate(_user: string, overrides?: CallOverrides): Promise<void>;

    partialLiquidateUsers(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    pricingAsset(overrides?: CallOverrides): Promise<string>;

    removeActiveUser(_user: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestPrice(overrides?: CallOverrides): Promise<void>;

    saveLevelMargin(overrides?: CallOverrides): Promise<number>;

    setFundingRate(overrides?: CallOverrides): Promise<void>;

    setSwapFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    specId(overrides?: CallOverrides): Promise<string>;

    swapFee(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    uservBaycBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uservUsdBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vBaycPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256,uint256)"(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;
    Deposit(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;

    "NewOracle(address)"(oracle?: null): NewOracleEventFilter;
    NewOracle(oracle?: null): NewOracleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): WithdrawEventFilter;
    Withdraw(
      token?: null,
      user?: null,
      amount?: null,
      balance?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<BigNumber>;

    _closeLongPostiton(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _closeShortPosition(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRate(overrides?: CallOverrides): Promise<BigNumber>;

    doesUserExist(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getAllLongvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAllShortvBaycBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLongBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLongUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPNL(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShortUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      _usdSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insuranceFunds(overrides?: CallOverrides): Promise<BigNumber>;

    isHardLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartialLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    nftOracle(overrides?: CallOverrides): Promise<BigNumber>;

    openLongPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openShortPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    partialLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    partialLiquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    pricingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    removeActiveUser(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saveLevelMargin(overrides?: CallOverrides): Promise<BigNumber>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    specId(overrides?: CallOverrides): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    userMargin(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    uservBaycBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uservUsdBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vBaycPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AutoCloseMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _closeLongPostiton(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _closeShortPosition(
      _user: string,
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activeUsers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePartialLiquidateValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      _assetSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doesUserExist(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllActiveUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllLongvBaycBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllShortvBaycBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLongBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLongUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPNL(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionNotional(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortBaycAmountOut(
      _vUsdAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortUsdAmountOut(
      _vBaycAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hardLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialVirtualPool(
      _assetSize: BigNumberish,
      _usdSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insuranceFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHardLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartialLiquidateable(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestFeeUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maintenanceMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLongPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openShortPosition(
      _usdAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partialLiquidate(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    partialLiquidateUsers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positive(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeActiveUser(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saveLevelMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    specId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userMargin(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uservBaycBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uservUsdBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vBaycPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vUsdPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCollateral(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
