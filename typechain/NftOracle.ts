/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace NftOracle {
  export type TimestampAndFloorPriceStruct = {
    timestamp: BigNumberish;
    floorPrice: BigNumberish;
  };

  export type TimestampAndFloorPriceStructOutput = [BigNumber, BigNumber] & {
    timestamp: BigNumber;
    floorPrice: BigNumber;
  };
}

export interface NftOracleInterface extends utils.Interface {
  contractName: "NftOracle";
  functions: {
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "fulfillPrice(bytes32,uint256)": FunctionFragment;
    "fulfillTimesampAndFloorPrice(bytes32,bytes32)": FunctionFragment;
    "getEstimate(bytes32,uint256,address,uint256,string)": FunctionFragment;
    "getFloorPrice(bytes32,uint256,address,string)": FunctionFragment;
    "getOracleAddress()": FunctionFragment;
    "getTimestampAndFloorPrice(bytes32)": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "price()": FunctionFragment;
    "requestIdPrice(bytes32)": FunctionFragment;
    "requestIdTimestampAndFloorPrice(bytes32)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "withdrawLink(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillTimesampAndFloorPrice",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEstimate",
    values: [BytesLike, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFloorPrice",
    values: [BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampAndFloorPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestIdPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdTimestampAndFloorPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillTimesampAndFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampAndFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestIdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdTimestampAndFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
}

export type ChainlinkCancelledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export type ChainlinkFulfilledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export type ChainlinkRequestedEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface NftOracle extends BaseContract {
  contractName: "NftOracle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillPrice(
      _requestId: BytesLike,
      _estimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillTimesampAndFloorPrice(
      _requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEstimate(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _tokenId: BigNumberish,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFloorPrice(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOracleAddress(overrides?: CallOverrides): Promise<[string]>;

    "getTimestampAndFloorPrice(bytes32)"(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[NftOracle.TimestampAndFloorPriceStructOutput]>;

    "getTimestampAndFloorPrice(bytes32,uint256,address,string)"(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestIdPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestIdTimestampAndFloorPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      _payee: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillPrice(
    _requestId: BytesLike,
    _estimate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillTimesampAndFloorPrice(
    _requestId: BytesLike,
    _result: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEstimate(
    _specId: BytesLike,
    _payment: BigNumberish,
    _assetAddress: string,
    _tokenId: BigNumberish,
    _pricingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFloorPrice(
    _specId: BytesLike,
    _payment: BigNumberish,
    _assetAddress: string,
    _pricingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOracleAddress(overrides?: CallOverrides): Promise<string>;

  "getTimestampAndFloorPrice(bytes32)"(
    _requestId: BytesLike,
    overrides?: CallOverrides
  ): Promise<NftOracle.TimestampAndFloorPriceStructOutput>;

  "getTimestampAndFloorPrice(bytes32,uint256,address,string)"(
    _specId: BytesLike,
    _payment: BigNumberish,
    _assetAddress: string,
    _pricingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestRequestId(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  requestIdPrice(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestIdTimestampAndFloorPrice(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    _payee: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillPrice(
      _requestId: BytesLike,
      _estimate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillTimesampAndFloorPrice(
      _requestId: BytesLike,
      _result: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getEstimate(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _tokenId: BigNumberish,
      _pricingAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getFloorPrice(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOracleAddress(overrides?: CallOverrides): Promise<string>;

    "getTimestampAndFloorPrice(bytes32)"(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<NftOracle.TimestampAndFloorPriceStructOutput>;

    "getTimestampAndFloorPrice(bytes32,uint256,address,string)"(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestRequestId(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    requestIdPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestIdTimestampAndFloorPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    withdrawLink(
      _payee: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;
  };

  estimateGas: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillPrice(
      _requestId: BytesLike,
      _estimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillTimesampAndFloorPrice(
      _requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEstimate(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _tokenId: BigNumberish,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFloorPrice(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getTimestampAndFloorPrice(bytes32)"(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampAndFloorPrice(bytes32,uint256,address,string)"(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    requestIdPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestIdTimestampAndFloorPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      _payee: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillPrice(
      _requestId: BytesLike,
      _estimate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillTimesampAndFloorPrice(
      _requestId: BytesLike,
      _result: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEstimate(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _tokenId: BigNumberish,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFloorPrice(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTimestampAndFloorPrice(bytes32)"(
      _requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimestampAndFloorPrice(bytes32,uint256,address,string)"(
      _specId: BytesLike,
      _payment: BigNumberish,
      _assetAddress: string,
      _pricingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestIdPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestIdTimestampAndFloorPrice(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      _payee: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
